### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Alarm {
  group: Group!
  id: Int!
  message: String!
  user: User!
}

input AlarmCreateInput {
  group: GroupCreateOneWithoutAlarmsInput!
  message: String!
  user: UserCreateOneWithoutAlarmsInput!
}

input AlarmCreateManyWithoutGroupInput {
  connect: [AlarmWhereUniqueInput!]
  create: [AlarmCreateWithoutGroupInput!]
}

input AlarmCreateManyWithoutUserInput {
  connect: [AlarmWhereUniqueInput!]
  create: [AlarmCreateWithoutUserInput!]
}

input AlarmCreateWithoutGroupInput {
  message: String!
  user: UserCreateOneWithoutAlarmsInput!
}

input AlarmCreateWithoutUserInput {
  group: GroupCreateOneWithoutAlarmsInput!
  message: String!
}

input AlarmListRelationFilter {
  every: AlarmWhereInput
  none: AlarmWhereInput
  some: AlarmWhereInput
}

input AlarmScalarWhereInput {
  AND: [AlarmScalarWhereInput!]
  groupId: IntFilter
  id: IntFilter
  message: StringFilter
  NOT: [AlarmScalarWhereInput!]
  OR: [AlarmScalarWhereInput!]
  userId: IntFilter
}

input AlarmUpdateManyDataInput {
  message: StringFieldUpdateOperationsInput
}

input AlarmUpdateManyWithoutGroupInput {
  connect: [AlarmWhereUniqueInput!]
  create: [AlarmCreateWithoutGroupInput!]
  delete: [AlarmWhereUniqueInput!]
  deleteMany: [AlarmScalarWhereInput!]
  disconnect: [AlarmWhereUniqueInput!]
  set: [AlarmWhereUniqueInput!]
  update: [AlarmUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [AlarmUpdateManyWithWhereNestedInput!]
  upsert: [AlarmUpsertWithWhereUniqueWithoutGroupInput!]
}

input AlarmUpdateManyWithoutUserInput {
  connect: [AlarmWhereUniqueInput!]
  create: [AlarmCreateWithoutUserInput!]
  delete: [AlarmWhereUniqueInput!]
  deleteMany: [AlarmScalarWhereInput!]
  disconnect: [AlarmWhereUniqueInput!]
  set: [AlarmWhereUniqueInput!]
  update: [AlarmUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AlarmUpdateManyWithWhereNestedInput!]
  upsert: [AlarmUpsertWithWhereUniqueWithoutUserInput!]
}

input AlarmUpdateManyWithWhereNestedInput {
  data: AlarmUpdateManyDataInput!
  where: AlarmScalarWhereInput!
}

input AlarmUpdateWithoutGroupDataInput {
  message: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAlarmsInput
}

input AlarmUpdateWithoutUserDataInput {
  group: GroupUpdateOneRequiredWithoutAlarmsInput
  message: StringFieldUpdateOperationsInput
}

input AlarmUpdateWithWhereUniqueWithoutGroupInput {
  data: AlarmUpdateWithoutGroupDataInput!
  where: AlarmWhereUniqueInput!
}

input AlarmUpdateWithWhereUniqueWithoutUserInput {
  data: AlarmUpdateWithoutUserDataInput!
  where: AlarmWhereUniqueInput!
}

input AlarmUpsertWithWhereUniqueWithoutGroupInput {
  create: AlarmCreateWithoutGroupInput!
  update: AlarmUpdateWithoutGroupDataInput!
  where: AlarmWhereUniqueInput!
}

input AlarmUpsertWithWhereUniqueWithoutUserInput {
  create: AlarmCreateWithoutUserInput!
  update: AlarmUpdateWithoutUserDataInput!
  where: AlarmWhereUniqueInput!
}

input AlarmWhereInput {
  AND: [AlarmWhereInput!]
  group: GroupWhereInput
  groupId: IntFilter
  id: IntFilter
  message: StringFilter
  NOT: [AlarmWhereInput!]
  OR: [AlarmWhereInput!]
  user: UserWhereInput
  userId: IntFilter
}

input AlarmWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Group {
  alarms(after: AlarmWhereUniqueInput, before: AlarmWhereUniqueInput, first: Int, last: Int): [Alarm!]!
  id: Int!
  name: String!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input GroupCreateInput {
  alarms: AlarmCreateManyWithoutGroupInput
  name: String!
  User: UserCreateOneWithoutGroupsInput
  users: UserCreateManyWithoutWakeUpGroupInput
}

input GroupCreateManyWithoutUserInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutUserInput!]
}

input GroupCreateOneWithoutAlarmsInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutAlarmsInput
}

input GroupCreateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
}

input GroupCreateWithoutAlarmsInput {
  name: String!
  User: UserCreateOneWithoutGroupsInput
  users: UserCreateManyWithoutWakeUpGroupInput
}

input GroupCreateWithoutUserInput {
  alarms: AlarmCreateManyWithoutGroupInput
  name: String!
  users: UserCreateManyWithoutWakeUpGroupInput
}

input GroupCreateWithoutUsersInput {
  alarms: AlarmCreateManyWithoutGroupInput
  name: String!
  User: UserCreateOneWithoutGroupsInput
}

input GroupListRelationFilter {
  every: GroupWhereInput
  none: GroupWhereInput
  some: GroupWhereInput
}

input GroupScalarWhereInput {
  AND: [GroupScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  userId: IntNullableFilter
}

input GroupUpdateManyDataInput {
  name: StringFieldUpdateOperationsInput
}

input GroupUpdateManyWithoutUserInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutUserInput!]
  delete: [GroupWhereUniqueInput!]
  deleteMany: [GroupScalarWhereInput!]
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutUserInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  data: GroupUpdateManyDataInput!
  where: GroupScalarWhereInput!
}

input GroupUpdateOneRequiredWithoutAlarmsInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutAlarmsInput
  update: GroupUpdateWithoutAlarmsDataInput
  upsert: GroupUpsertWithoutAlarmsInput
}

input GroupUpdateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  update: GroupUpdateWithoutUsersDataInput
  upsert: GroupUpsertWithoutUsersInput
}

input GroupUpdateWithoutAlarmsDataInput {
  name: StringFieldUpdateOperationsInput
  User: UserUpdateOneWithoutGroupsInput
  users: UserUpdateManyWithoutWakeUpGroupInput
}

input GroupUpdateWithoutUserDataInput {
  alarms: AlarmUpdateManyWithoutGroupInput
  name: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutWakeUpGroupInput
}

input GroupUpdateWithoutUsersDataInput {
  alarms: AlarmUpdateManyWithoutGroupInput
  name: StringFieldUpdateOperationsInput
  User: UserUpdateOneWithoutGroupsInput
}

input GroupUpdateWithWhereUniqueWithoutUserInput {
  data: GroupUpdateWithoutUserDataInput!
  where: GroupWhereUniqueInput!
}

input GroupUpsertWithoutAlarmsInput {
  create: GroupCreateWithoutAlarmsInput!
  update: GroupUpdateWithoutAlarmsDataInput!
}

input GroupUpsertWithoutUsersInput {
  create: GroupCreateWithoutUsersInput!
  update: GroupUpdateWithoutUsersDataInput!
}

input GroupUpsertWithWhereUniqueWithoutUserInput {
  create: GroupCreateWithoutUserInput!
  update: GroupUpdateWithoutUserDataInput!
  where: GroupWhereUniqueInput!
}

input GroupWhereInput {
  alarms: AlarmListRelationFilter
  AND: [GroupWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
  users: UserListRelationFilter
}

input GroupWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  createOneAlarm(data: AlarmCreateInput!): Alarm!
  createOneGroup(data: GroupCreateInput!): Group!
  createOneUser(data: UserCreateInput!): User!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  alarm(where: AlarmWhereUniqueInput!): Alarm
  group(where: GroupWhereUniqueInput!): Group
  groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int, where: GroupWhereInput): [Group!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!]): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  alarms(after: AlarmWhereUniqueInput, before: AlarmWhereUniqueInput, first: Int, last: Int): [Alarm!]!
  groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  id: Int!
  name: String!
  wakeUpGroup: Group
}

input UserCreateInput {
  alarms: AlarmCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUserInput
  name: String!
  wakeUpGroup: GroupCreateOneWithoutUsersInput
}

input UserCreateManyWithoutWakeUpGroupInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutWakeUpGroupInput!]
}

input UserCreateOneWithoutAlarmsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAlarmsInput
}

input UserCreateOneWithoutGroupsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutGroupsInput
}

input UserCreateWithoutAlarmsInput {
  groups: GroupCreateManyWithoutUserInput
  name: String!
  wakeUpGroup: GroupCreateOneWithoutUsersInput
}

input UserCreateWithoutGroupsInput {
  alarms: AlarmCreateManyWithoutUserInput
  name: String!
  wakeUpGroup: GroupCreateOneWithoutUsersInput
}

input UserCreateWithoutWakeUpGroupInput {
  alarms: AlarmCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUserInput
  name: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  groupId: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  groupId: IntNullableFilter
  id: IntFilter
  name: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
}

input UserUpdateInput {
  alarms: AlarmUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  wakeUpGroup: GroupUpdateOneWithoutUsersInput
}

input UserUpdateManyDataInput {
  name: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithoutWakeUpGroupInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutWakeUpGroupInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutWakeUpGroupInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutWakeUpGroupInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutAlarmsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAlarmsInput
  update: UserUpdateWithoutAlarmsDataInput
  upsert: UserUpsertWithoutAlarmsInput
}

input UserUpdateOneWithoutGroupsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutGroupsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutGroupsDataInput
  upsert: UserUpsertWithoutGroupsInput
}

input UserUpdateWithoutAlarmsDataInput {
  groups: GroupUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  wakeUpGroup: GroupUpdateOneWithoutUsersInput
}

input UserUpdateWithoutGroupsDataInput {
  alarms: AlarmUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  wakeUpGroup: GroupUpdateOneWithoutUsersInput
}

input UserUpdateWithoutWakeUpGroupDataInput {
  alarms: AlarmUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutWakeUpGroupInput {
  data: UserUpdateWithoutWakeUpGroupDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAlarmsInput {
  create: UserCreateWithoutAlarmsInput!
  update: UserUpdateWithoutAlarmsDataInput!
}

input UserUpsertWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput!
  update: UserUpdateWithoutGroupsDataInput!
}

input UserUpsertWithWhereUniqueWithoutWakeUpGroupInput {
  create: UserCreateWithoutWakeUpGroupInput!
  update: UserUpdateWithoutWakeUpGroupDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  alarms: AlarmListRelationFilter
  AND: [UserWhereInput!]
  groupId: IntNullableFilter
  groups: GroupListRelationFilter
  id: IntFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  wakeUpGroup: GroupWhereInput
}

input UserWhereUniqueInput {
  id: Int
}
